<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title></title>
    <link>https://effortless-serverless.com</link>
    <description>
      Effortless Serverless. Checkout our new book: Serverless Applications with Node.js
    </description>
    
        
            <item>
                <title>From Express.js to AWS Lambda: Migrating existing Node.js applications to serverless</title>
                <link>https://effortless-serverless.com/serverless/claudia/migration/2018/03/29/serverless-migration/</link>
                <content:encoded>
                    <![CDATA[
                    <p>Serverless architecture makes some of the good practices for architecturing apps obsolete. Building a serverless application from scratch requires a mind shift, but once you start thinking in a serverless way, all the dots connect quickly. With the help of tools such as Claudia.js, development and deployment cycles are short and easy.</p>

<p>But most of the time you can’t just start from scratch. Instead, you have an app with a few thousand lines of code and a couple of thousand daily active users, with a history of questionable decisions caused by business requests or other issues that shaped your code in a specific way.</p>

<p>Can you and should you migrate such an application to serverless? The answer is not a simple one, because it depends on the specifics of your application, the structure of your team, and many other things. But in most cases, serverless can be beneficial for legacy applications.</p>

<p>Let’s say you are working on a nice and simple Node.js application. For example, an app similar to <a href="http://vacationtrackerbot.com">Vacation Tracker bot</a>, a simple Slack tool for managing team vacations.</p>

<p><img src="/images/serverless-migration/figure-0.jpg" alt="Vacation tracker flow" /></p>

<p>The app itself is simple. Most of the communication goes through Slack, but there’s also a nice web dashboard. As you are building MVP, you don’t want to spend too much resources on it, so you spin up a new Digital Ocean instance and bundle everything inside it. At that point, as shown in the figure below, your app consists of the following:</p>

<ul>
  <li>Ubuntu droplet with nginx</li>
  <li>Express.js app that serves static pages (SPA dashboard) and an API</li>
  <li>MongoDB database</li>
  <li>Cronjob that sends scheduled messages</li>
</ul>

<p><img src="/images/serverless-migration/figure-1.jpg" alt="Simple Express.js and MongoDB app" /></p>

<p>But sometimes your app has a big spikes in usage, and you need to think about scaling. Not to mention that you need many other things such as monitoring, SSL, development and production environments, etc.</p>

<p>With first users, your fun side project quickly became another thing you need to maintain and configure for hours. An it costs more and more, even though users are still not paying for it. Not fun at all.</p>

<p>You heard about serverless and decided to give it a try. But how can you transform your traditional Node.js app to serverless? Should you just fit everything into AWS Lambda?</p>

<blockquote>
  <p>In case you are not familiar with serverless, or you still think it’s some magic that runs web apps by hamster wheels instead of servers, see <a href="https://livebook.manning.com/#!/book/serverless-applications-with-nodejs/chapter-1">this explanation</a>.</p>
</blockquote>

<h2 id="divide-and-conquer">Divide and conquer</h2>

<p>Although fitting everything into AWS Lambda would technically make your app serverless and it might be a good first step, to gain full benefits of serverless you’ll need to put a bit more effort and embrace the serverless platform by dividing your app into small services.</p>

<p>Before we see how, what are the benefits you could gain?</p>

<p>Some of the most important benefits are:</p>

<ul>
  <li>Your app will autoscale. And it’ll do that fast, from 0 to 1000 parallel users in less than a few seconds.</li>
  <li>You’ll pay only if someone is using your app. Zero users cost you $0. As amount of users increases,  the cost increases a bit too. For example, MindMup pays $100 a month for 400,000 monthly active users, impressive, isn’t it? Read more about it <a href="https://livebook.manning.com/#!/book/serverless-applications-with-nodejs/chapter-15">here</a>.</li>
  <li>Having as many environments similar to production doesn’t cost you anything if no-one is using them. Running experiments and tests is easier and cheaper than ever before.</li>
  <li>Faster development and deployment cycles, because your app is divided into smaller units and even a frontend developer that has almost non backend experience can deploy a production-ready app.</li>
</ul>

<p>How do you do that? Simple (but sometimes not easy).</p>

<p>You can start by moving your single page app and static content to AWS S3. Yes, the same S3 you are using for storing files. If you combine it with AWS CloudFront, you’ll get a powerful serverless static web site hosting with SSL and cache. You can configure your static website <a href="https://www.josephecombs.com/2018/03/05/how-to-make-an-AWS-S3-static-website-with-ssl">manually</a> or by using a tool such as <a href="https://github.com/stojanovic/scottyjs">Scotty.js</a>.</p>

<p>Next step is to move database outside of your Digital Ocean droplet. If you want to keep MongoDB as a database, you can move it to MongoDB Atlas, a cloud-hosted MongoDB service engineered and run by the same team that builds the MongoDB database. Other, probably better option would be to migrate your content to AWS DynamoDB database, which is a serverless noSQL database offered by Amazon Web Services.</p>

<p>Now that your static files and database are out of the game, you can start by pulling other services out of your Express.js app. For example, scheduled messages (weekly team vacation notifications) are a good first candidate. As you can’t run a cronjob in AWS Lambda, you’ll need a help from another service: CloudWatch Events can trigger your Lambda function at the scheduled time, as described <a href="https://medium.freecodecamp.org/scheduling-slack-messages-using-aws-lambda-e56a8eb22818">here</a>.</p>

<p>Finally, you’ll have to migrate your API. To do so, you can split your logic into multiple AWS Lambda functions and put the API Gateway in front of them, because Lambda functions can’t be triggered by HTTP request directly. How should you split your API? That depends on your use case, but the easiest way is to split it by into business logic units. For example, one Lambda funciton witll work with Slack slash commands, another one will handle Slack Events webhooks, some other function or functions will serve the dashboard API. As you have some Node.js experience, you can easily create, deploy and manage web APIs using <a href="https://claudiajs.com">Claudia.js</a>.</p>

<p>As some of your API endpoints will require auth (either direct or via social login), you can replace a tool such as passport.js with AWS serverless auth service Cognito. With Cognito, requests without valid authorization will never trigger your Lambda function, so you’ll pay less.</p>

<p>After migration, your app could look like this:</p>

<p><img src="/images/serverless-migration/figure-2.jpg" alt="Serverless app" /></p>

<h2 id="next-steps">Next steps</h2>

<p>Many teams are already using serverless it in production and, according to  <a href="http://www.zdnet.com/article/serverless-computing-containers-see-triple-digit-quarterly-growth-among-cloud-users/">recent survey of AWS customers published by Cloudability</a> serverless adoption grew almost 700% in a year.</p>

<p>If you want to learn more each about building and migrating serverless applications, and each of the services mentioned above, <a href="https://twitter.com/simalexan">Aleksandar Simović</a> and I wrote a whole book about these topics for Manning Publications. You can get the book and read the free chapters here:</p>

<p><a href="https://www.manning.com/books/serverless-applications-with-nodejs">https://www.manning.com/books/serverless-applications-with-nodejs</a></p>

<p>Book will also tell you more about how other teams are using serverless in production. For example, to read more about how MindMup serves 400,000 monthly active users with two-person team and $100 AWS bill, or how a small team of CodePen frontend developers serves 200,000 requests per hour using AWS Lambda, jump to the case studies chapter directly <a href="https://livebook.manning.com/#!/book/serverless-applications-with-nodejs/chapter-15">here</a>.</p>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/serverless/claudia/migration/2018/03/29/serverless-migration/</guid>
                <description>
                    
                </description>
                <pubDate>Thu, 29 Mar 2018 12:00:00 +0200</pubDate>
                <author>Aleksandar Simović and Slobodan Stojanović</author>
            </item>
        
    
        
            <item>
                <title>How To Create a Serverless Node.js App with DynamoDB For The First Time</title>
                <link>https://effortless-serverless.com/serverless/lambda/dynamodb/2017/10/19/serverless-icecream-database/</link>
                <content:encoded>
                    <![CDATA[
                    <p>There are many articles on serverless with explained ideas, benefits and so on. Serverless is great, but articles sometimes sound more like a TV commercial.</p>

<p>Sometimes you just want to try and create a working example.</p>

<blockquote>
  <p>Serverless is like ice cream. It’s nice to talk about it, but much better to try out.</p>
</blockquote>

<p><img src="/images/serverless-icecream.jpg" alt="" /></p>

<p>The goal is to show how to create a serverless Node.js app with DynamoDB that stores and retrieves data.
Since ice creams are already mentioned, this service will be for an ice cream shop. You will save and show ice creams.</p>

<p>Let’s first see what do you need:</p>

<ul>
  <li>
    <p><strong>a serverless host</strong> — where you’re going to deploy and execute your code and connect to a database. We’re going with AWS, as the most mature platform at the moment.
 AWS has a serverless container service called Lambda. Because Lambda is just a compute service without “outside access”, we also need an “access point” or a “front door” service — AWS API Gateway.</p>
  </li>
  <li>
    <p><strong>a development and deployment tool / library</strong> — helps with code setup and deployment. Because serverless is still new and these tools make your life easier. Choosing a library influences the way you build your services. We’re going to use Claudia.js - a development and deployment tool with helpful examples and a good community. It will deploy your service to your AWS serverless container (Lambda) and create an API Gateway for it.</p>
  </li>
  <li>
    <p><strong>a service</strong> — your service that receives a request,  saves an ice cream to a database or shows all ice creams you saved.</p>
  </li>
  <li>
    <p><strong>a database</strong> — a storage to which you connect your service to store ice creams. We’re going with DynamoDB — AWS noSQL database.</p>
  </li>
</ul>

<p><img src="/images/serverless-icecream-overview.png" alt="The overview of your service infrastructure" /></p>

<h3 id="1-serverless-host-setupaws">1. Serverless host setup — AWS</h3>

<p>You need to have an AWS account and a locally set AWS credentials file.</p>

<p><em>If you already have both setup, scroll to section 2.</em></p>

<p>If not, open your browser and go to — <a href="https://console.aws.amazon.com">https://console.aws.amazon.com</a>.</p>

<p>If you don’t have an AWS account, click on the button <em>“Create a new AWS account”</em> and follow the process. </p>

<p>If you do, you only need to set your AWS credentials. To do it:</p>

<ol>
  <li>
    <p>Open AWS Console, click on <em>“Services”</em> in the top navigation bar. Write IAM in the search box and click on the resulted IAM.</p>
  </li>
  <li>
    <p>Click on “Users” on the left side menu, then “Add User”. You will see the following picture.</p>

    <p><img src="/images/serverless-icecream-user.png" alt="" />
 There you need to type in the user name and check the programmatic access. Then click the button “Next: Permissions”.</p>
  </li>
  <li>
    <p>You will be on the 2nd step. Now click the “Attach existing policies directly” and then check “Administrator Full Access”. Proceed to the 3rd step “Review”, and then click the “Create user” for the 4th step. 
At the last (4th) step, you will see a table with your user name and columns with your user’s “Access Key Id” and “Secret Access Key Id”. Copy those values.</p>
  </li>
  <li>
    <p>Add those keys  to your .aws/credentials file.</p>

    <p>a) On OSX/*nix in — <code class="highlighter-rouge">~/.aws</code></p>

    <p>b) On Win its  — <code class="highlighter-rouge">C:/Users/&lt;your-user&gt;/.aws</code></p>

    <div class="language-shell highlighter-rouge"><pre class="highlight"><code> <span class="o">[</span>default]
 aws_access_key_id <span class="o">=</span> YOUR_ACCESS_KEY
 aws_secret_access_key <span class="o">=</span> YOUR_ACCESS_SECRET
</code></pre>
    </div>
    <p>Set the AWS_PROFILE environment variable to default.</p>
  </li>
</ol>

<h3 id="2-setup-your-development-and-deployment-toolclaudiajs">2. Setup your development and deployment tool — Claudia.js</h3>

<p><em>If you have Claudia.js installed already scroll to section 3.</em></p>

<p>Open your terminal and run:</p>

<p><code class="highlighter-rouge">npm install -g claudia</code></p>

<p>Claudia.js is now installed globally, available for all projects.</p>

<h3 id="3-write-your-serviceice-creamshop">3. Write your service — Ice Cream Shop</h3>

<p>Create your project folder (you can name it <code class="highlighter-rouge">ice-cream-shop</code>) and open it in your terminal. </p>

<p>Initialize your Node project.</p>

<p><em>You can do it quickly by running</em> <code class="highlighter-rouge">npm init -f</code></p>

<p>Then run</p>
<div class="language-shell highlighter-rouge"><pre class="highlight"><code> npm install aws-sdk claudia-api-builder -S 
</code></pre>
</div>

<p>This installs AWS SDK and Claudia API Builder. You need AWS SDK for accessing DynamoDB. Claudia API Builder is a helper tool with an Express-like syntax for your endpoints.</p>

<p>Your service needs to have two endpoints:</p>

<ol>
  <li>
    <p>to save an icecream — needs a POST request</p>
  </li>
  <li>
    <p>to get all saved ice creams — needs a GET request</p>
  </li>
</ol>

<p>Now create an empty index.js file. Open it and type:</p>

<script src="https://gist.github.com/simalexan/528f4842f4f3be3804af9512c27550a6.js"></script>

<p>This finishes your service.</p>

<h3 id="4-databasesetupdynamodb">4. Database — setup DynamoDB</h3>

<p>You need to create a database on AWS, but instead of using AWS Console, you can just execute one command:</p>

<div class="language-shell highlighter-rouge"><pre class="highlight"><code>aws dynamodb create-table --table-name icecreams <span class="se">\</span>
  --attribute-definitions <span class="nv">AttributeName</span><span class="o">=</span>icecreamid,AttributeType<span class="o">=</span>S <span class="se">\</span>
  --key-schema <span class="nv">AttributeName</span><span class="o">=</span>icecreamid,KeyType<span class="o">=</span>HASH <span class="se">\</span>
  --provisioned-throughput <span class="nv">ReadCapacityUnits</span><span class="o">=</span>1,WriteCapacityUnits<span class="o">=</span>1 <span class="se">\</span>
  --region us-east-1 <span class="se">\</span>
  --query TableDescription.TableArn --output text
</code></pre>
</div>

<p>This command creates a DynamoDB table named <code class="highlighter-rouge">icecreams</code> in the same region as our Lambda, with an key attribute <code class="highlighter-rouge">icecreamid</code> of String type. The command returns the table’s Amazon Resource Name (ARN) to confirm that everything is set up correctly.</p>

<h4 id="giving-your-service-permission-for-thedatabase">Giving your service permission for the database</h4>

<p>The last step is allowing your service access to your DynamoDb database. To do that your service requires a permission policy. Instead of doing it via AWS Console, you can create a policy file in your project and apply it with Claudia.</p>

<p>Inside your ice-cream-shop project folder create a folder named <code class="highlighter-rouge">policy</code> and in it a file called <code class="highlighter-rouge">dynamodb-policy.json</code> with the following contents:</p>

<script src="https://gist.github.com/simalexan/5e7bff9eb50cd392c715407ad1682b10.js"></script>

<p><em>If copying from here, be sure the code stays with the same spacing. JSON must keep a proper structure.</em></p>

<p>This policy allows your Lambda service to access your DynamoDb database. When invoking Claudia to deploy your code, this policy file location needs to be passed as the command option, to let Claudia know to assign the policy to your Lambda.</p>

<p>It’s time for your first deployment. In the first, Claudia.js creates a Lambda for your service. So, go back to your project folder <code class="highlighter-rouge">ice-cream-shop</code> and run:</p>

<div class="language-shell highlighter-rouge"><pre class="highlight"><code>claudia create --region us-east-1 --api-module index --policies policy
</code></pre>
</div>

<p>This command creates your serverless container (AWS Lambda) in the <code class="highlighter-rouge">us-east-1</code> region, sets the <code class="highlighter-rouge">index</code> file as the main, and assigns the policy from the <code class="highlighter-rouge">policy</code> folder to your Lambda. If successful, it returns the created service URL endpoint in the command final output similar to this:</p>

<div class="language-shell highlighter-rouge"><pre class="highlight"><code><span class="o">{</span>
  <span class="s2">"lambda"</span>: <span class="o">{</span>
    <span class="s2">"role"</span>: <span class="s2">"ice-cream-shop-executor"</span>,
    <span class="s2">"name"</span>: <span class="s2">"ice-cream-shop"</span>,
    <span class="s2">"region"</span>: <span class="s2">"us-east-1"</span>
  <span class="o">}</span>,
  <span class="s2">"api"</span>: <span class="o">{</span>
    <span class="s2">"id"</span>: <span class="s2">"your-service-id"</span>,
    <span class="s2">"module"</span>: <span class="s2">"index"</span>,
    <span class="s2">"url"</span>: <span class="s2">"https://your-service-url.execute-api.us-east-1.amazonaws.com/latest"</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre>
</div>

<p>That’s it! </p>

<h4 id="trying-out-yourservice">Trying out your service</h4>

<p>Use cURL for testing. Get all ice creams:</p>

<div class="language-shell highlighter-rouge"><pre class="highlight"><code>curl https://your-service-url.execute-api.us-east-1.amazonaws.com/latest/icecreams
</code></pre>
</div>

<p>Save an ice cream:</p>

<div class="language-shell highlighter-rouge"><pre class="highlight"><code>curl -H <span class="s2">"Content-Type: application/json"</span> -X POST <span class="se">\</span>
-d <span class="s1">'{"icecreamId":"123", "name":"chocolate"}'</span> <span class="se">\</span>
https://your-service-url.execute-api.us-east-1.amazonaws.com/latest/icecreams
</code></pre>
</div>

<p>By running these commands you’ll see your service working!</p>

<p>That’s it!</p>

<h4 id="errors">Errors?</h4>
<p>In case of an error, please check your code if you haven’t missed anything. After an error, invoking the command again may show</p>

<div class="language-shell highlighter-rouge"><pre class="highlight"><code><span class="s1">'Role with name ice-cream-shop-executor already exists.'</span>
</code></pre>
</div>

<p>In that case, go to your <a href="https://console.aws.amazon.com/iam">AWS Console IAM</a>, in the left bar- click <em>“Roles”</em> and find a role with the name error specified and delete it. Then try the previous claudia create command again.</p>

<h4 id="updating-yourservice">Updating your service</h4>
<p>If you want to redeploy to your Lambda with Claudia.js, now you need to do a claudia update instead of create . The full command would look like this:</p>

<p><code class="highlighter-rouge">claudia update</code></p>

<p>It doesn’t need all those configuration options like <code class="highlighter-rouge">create</code>, because it stores them locally for you. If its successful, it also returns the URL of your deployed service.</p>

<p>Now go, you deserve some ice cream!</p>

<p>The full code example is available on <a href="https://github.com/effortless-serverless/ice-cream-shop">this repository</a>.</p>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/serverless/lambda/dynamodb/2017/10/19/serverless-icecream-database/</guid>
                <description>
                    
                </description>
                <pubDate>Thu, 19 Oct 2017 12:00:00 +0200</pubDate>
                <author>Aleksandar Simović and Slobodan Stojanović</author>
            </item>
        
    
        
            <item>
                <title>Checkout our book - Serverless Applications with Node.js</title>
                <link>https://effortless-serverless.com/claudia/book/2017/10/03/new-book/</link>
                <content:encoded>
                    <![CDATA[
                    <p>Our book “Serverless Applications with Node.js” is now available as a MEAP release on Manning Publication website.</p>

<p><a class="no-style-link" href="/book"><img src="/images/effortless-serverless-social.png" alt="Serverless Applications with Node.js" /></a></p>

<p>The book walks you through building serverless apps on AWS using JavaScript. Inside, you’ll create a full project designed to help you understand and apply general serverless design principles and concepts.</p>

<p>Along the way, you’ll also discover what Claudia brings to the table as you build and deploy a scalable event-based serverless application that is fully integrated with AWS services including Lambda and API Gateway.</p>

<p>You’ll learn to simplify the design and development process so you can focus on getting your application deployed as fast as possible without sacrificing quality.</p>

<p>Plus, you’ll learn how to migrate your existing Express apps to serverless!</p>

<p>Learn more about the book <a href="/book">here</a>.</p>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/claudia/book/2017/10/03/new-book/</guid>
                <description>
                    
                </description>
                <pubDate>Tue, 03 Oct 2017 12:00:00 +0200</pubDate>
                <author>Aleksandar Simović and Slobodan Stojanović</author>
            </item>
        
    
        
            <item>
                <title>Single command deployment for single page apps</title>
                <link>https://effortless-serverless.com/aws/s3/cloudfront/2017/08/25/single-command-deployment-for-single-page-apps/</link>
                <content:encoded>
                    <![CDATA[
                    <p>Developing a single page app is hard. From the very beginning, you’ll need to make many decisions — decisions like picking a framework, setting the folder structure, configuring linter, and many others.</p>

<p>Some of those tasks are easier because of the ecosystem of the tools surrounding your favorite framework and web development in general. For example, tools like <a href="https://github.com/facebookincubator/create-react-app">Create React App</a>, <a href="https://cli.angular.io/">Angular CLI</a> and <a href="https://github.com/choojs/create-choo-app">Create Choo App</a> will help you to setup your favorite framework in a few seconds.</p>

<p><img src="/images/scotty-post-cover.jpeg" alt="Photo by Jonatan Pie on Unsplash" /></p>

<p>Often, you don’t have enough time to even think about the deployment when you start your new project. And at some point, you need your app to be publicly accessible because you want to show it to your client, friends, or to add it to your portfolio while you are looking for your first job.</p>

<p>But how can you pick the best place to deploy the app fast? There are many tools for deployment, too. If you go with some new shiny thing, will it scale for production, or will you be forced to make another decision about changing it soon? You can go with Github pages, but what about the HTTPS you need for service workers?</p>

<p>Amazon offers something that can scale, a combination of <a href="https://aws.amazon.com/s3/">Simple Storage Service</a> (S3) for static website hosting and <a href="https://aws.amazon.com/cloudfront/">CloudFront</a> as a CDN is a cheap but scalable way to deliver your single page app. Although it takes some time to prepare both of those too, even more if you are not familiar with Amazon Web Services.</p>

<p>There is an easier way, though — introducing <a href="https://github.com/stojanovic/scottyjs">Scotty.js</a>, a simple CLI tool that helps you deploy your website or single page app to Amazon S3 and CloudFront with a single command.</p>

<h2 id="beam-me-up-scotty">Beam me up, Scotty</h2>

<p>The main idea behind Scotty is to deploy your static website or single page app to Amazon ecosystem with a single command.</p>

<p>It will deploy your static website, set up CDN with HTTPS, and even copy the website URL to your clipboard in a minute or so, depending on your internet speed and the website/app size.</p>

<p>For single page applications, it will also configure redirections, so pushState can work out of the box.</p>

<p><img src="/images/beam-me-up-scotty.gif" alt="Beam me up, Scotty" /></p>

<p>Let’s see it in action with a simple React application.</p>

<h2 id="create-react-app">Create React App</h2>

<p>Before the deployment, we need the app, so let’s create a simple one using Create React App.</p>

<p>First, create a sample app by running <code class="highlighter-rouge">create react app</code> command from your terminal:</p>

<div class="language-shell highlighter-rouge"><pre class="highlight"><code>create-react-app scotty-cra-example
</code></pre>
</div>

<p>If you do not have the create-react-app command installed, you can get it from NPM here: https://www.npmjs.com/package/create-react-app.</p>

<p>Or if you are using NPM v5, you can run Create React App command without installing it globally with the new <code class="highlighter-rouge">npx</code> command:</p>

<div class="language-shell highlighter-rouge"><pre class="highlight"><code>npx create-react-app -- scotty-cra-example
</code></pre>
</div>

<p>Learn more about npx here: https://medium.com/@maybekatz/introducing-npx-an-npm-package-runner-55f7d4bd282b.</p>

<p>Let’s add React Router to demonstrate how pushState support works. To do so, enter your new project and install React Router as a dependency:</p>

<div class="language-shell highlighter-rouge"><pre class="highlight"><code><span class="nb">cd </span>scotty-cra-example

npm install react-router-dom --save
</code></pre>
</div>

<p>Now that everything is installed, let’s add React Router to the project — open “src/App.js” file in your favorite editor and update it to look like a basic example of React Router (https://reacttraining.com/react-router/web/example/basic):</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="kr">import</span> <span class="nx">React</span> <span class="nx">from</span> <span class="s1">'react'</span>
<span class="kr">import</span> <span class="p">{</span>
  <span class="nx">BrowserRouter</span> <span class="nx">as</span> <span class="nx">Router</span><span class="p">,</span>
  <span class="nx">Route</span><span class="p">,</span>
  <span class="nx">Link</span>
<span class="p">}</span> <span class="nx">from</span> <span class="s1">'react-router-dom'</span>
<span class="kr">import</span> <span class="nx">logo</span> <span class="nx">from</span> <span class="s1">'./logo.svg'</span>
<span class="kr">import</span> <span class="s1">'./App.css'</span>

<span class="kr">const</span> <span class="nx">BasicExample</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">(</span>
  <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="s2">"App"</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="s2">"App-header"</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">img</span> <span class="nx">src</span><span class="o">=</span><span class="p">{</span><span class="nx">logo</span><span class="p">}</span> <span class="nx">className</span><span class="o">=</span><span class="s2">"App-logo"</span> <span class="nx">alt</span><span class="o">=</span><span class="s2">"logo"</span> <span class="o">/&gt;</span>
      <span class="o">&lt;</span><span class="nx">h2</span><span class="o">&gt;</span><span class="nx">Welcome</span> <span class="nx">to</span> <span class="nx">React</span><span class="o">&lt;</span><span class="sr">/h2</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="nx">p</span> <span class="nx">className</span><span class="o">=</span><span class="s2">"App-intro"</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">Router</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
          <span class="o">&lt;</span><span class="nx">ul</span><span class="o">&gt;</span>
            <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;&lt;</span><span class="nx">Link</span> <span class="nx">to</span><span class="o">=</span><span class="s2">"/"</span><span class="o">&gt;</span><span class="nx">Home</span><span class="o">&lt;</span><span class="sr">/Link&gt;&lt;/</span><span class="nx">li</span><span class="o">&gt;</span>
            <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;&lt;</span><span class="nx">Link</span> <span class="nx">to</span><span class="o">=</span><span class="s2">"/about"</span><span class="o">&gt;</span><span class="nx">About</span><span class="o">&lt;</span><span class="sr">/Link&gt;&lt;/</span><span class="nx">li</span><span class="o">&gt;</span>
            <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;&lt;</span><span class="nx">Link</span> <span class="nx">to</span><span class="o">=</span><span class="s2">"/topics"</span><span class="o">&gt;</span><span class="nx">Topics</span><span class="o">&lt;</span><span class="sr">/Link&gt;&lt;/</span><span class="nx">li</span><span class="o">&gt;</span>
          <span class="o">&lt;</span><span class="sr">/ul</span><span class="err">&gt;
</span>
          <span class="o">&lt;</span><span class="nx">hr</span><span class="o">/&gt;</span>

          <span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">exact</span> <span class="nx">path</span><span class="o">=</span><span class="s2">"/"</span> <span class="nx">component</span><span class="o">=</span><span class="p">{</span><span class="nx">Home</span><span class="p">}</span><span class="sr">/</span><span class="err">&gt;
</span>          <span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">path</span><span class="o">=</span><span class="s2">"/about"</span> <span class="nx">component</span><span class="o">=</span><span class="p">{</span><span class="nx">About</span><span class="p">}</span><span class="sr">/</span><span class="err">&gt;
</span>          <span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">path</span><span class="o">=</span><span class="s2">"/topics"</span> <span class="nx">component</span><span class="o">=</span><span class="p">{</span><span class="nx">Topics</span><span class="p">}</span><span class="sr">/</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="sr">/Router</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/p</span><span class="err">&gt;
</span>  <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span><span class="p">)</span>

<span class="kr">const</span> <span class="nx">Home</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">(</span>
  <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">h2</span><span class="o">&gt;</span><span class="nx">Home</span><span class="o">&lt;</span><span class="sr">/h2</span><span class="err">&gt;
</span>  <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span><span class="p">)</span>

<span class="kr">const</span> <span class="nx">About</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">(</span>
  <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">h2</span><span class="o">&gt;</span><span class="nx">About</span><span class="o">&lt;</span><span class="sr">/h2</span><span class="err">&gt;
</span>  <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span><span class="p">)</span>

<span class="kr">const</span> <span class="nx">Topics</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">match</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">(</span>
  <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">h2</span><span class="o">&gt;</span><span class="nx">Topics</span><span class="o">&lt;</span><span class="sr">/h2</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="nx">ul</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">Link</span> <span class="nx">to</span><span class="o">=</span><span class="p">{</span><span class="err">`</span><span class="nx">$</span><span class="p">{</span><span class="nx">match</span><span class="p">.</span><span class="nx">url</span><span class="p">}</span><span class="sr">/rendering`}</span><span class="err">&gt;
</span>          <span class="nx">Rendering</span> <span class="kd">with</span> <span class="nx">React</span>
        <span class="o">&lt;</span><span class="sr">/Link</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="sr">/li</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">Link</span> <span class="nx">to</span><span class="o">=</span><span class="p">{</span><span class="err">`</span><span class="nx">$</span><span class="p">{</span><span class="nx">match</span><span class="p">.</span><span class="nx">url</span><span class="p">}</span><span class="sr">/components`}</span><span class="err">&gt;
</span>          <span class="nx">Components</span>
        <span class="o">&lt;</span><span class="sr">/Link</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="sr">/li</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">Link</span> <span class="nx">to</span><span class="o">=</span><span class="p">{</span><span class="err">`</span><span class="nx">$</span><span class="p">{</span><span class="nx">match</span><span class="p">.</span><span class="nx">url</span><span class="p">}</span><span class="sr">/props-v-state`}</span><span class="err">&gt;
</span>          <span class="nx">Props</span> <span class="nx">v</span><span class="p">.</span> <span class="nx">State</span>
        <span class="o">&lt;</span><span class="sr">/Link</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="sr">/li</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/ul</span><span class="err">&gt;
</span>
    <span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">path</span><span class="o">=</span><span class="p">{</span><span class="err">`</span><span class="nx">$</span><span class="p">{</span><span class="nx">match</span><span class="p">.</span><span class="nx">url</span><span class="p">}</span><span class="sr">/:topicId`} component={Topic}/</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">exact</span> <span class="nx">path</span><span class="o">=</span><span class="p">{</span><span class="nx">match</span><span class="p">.</span><span class="nx">url</span><span class="p">}</span> <span class="nx">render</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="p">(</span>
      <span class="o">&lt;</span><span class="nx">h3</span><span class="o">&gt;</span><span class="nx">Please</span> <span class="nx">select</span> <span class="nx">a</span> <span class="nx">topic</span><span class="p">.</span><span class="o">&lt;</span><span class="sr">/h3</span><span class="err">&gt;
</span>    <span class="p">)}</span><span class="sr">/</span><span class="err">&gt;
</span>  <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span><span class="p">)</span>

<span class="kr">const</span> <span class="nx">Topic</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">match</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">(</span>
  <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">h3</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">match</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">topicId</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/h3</span><span class="err">&gt;
</span>  <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span><span class="p">)</span>

<span class="kr">export</span> <span class="k">default</span> <span class="nx">BasicExample</span>
</code></pre>
</div>

<p>Now, if you start your app using <code class="highlighter-rouge">npm start</code> it should work and look similar to the one from this screenshot:</p>

<p><img src="/images/welcome-to-react.png" alt="Basic React app with React Router on localhost" /></p>

<p>It’s time to build your app using <code class="highlighter-rouge">npm run build</code> node script. This will create a folder called “build” in root of your project.</p>

<h2 id="deploy-the-app">Deploy the app</h2>

<p>First install Scotty.js from NPM as a global package by running:</p>

<div class="language-shell highlighter-rouge"><pre class="highlight"><code>npm install scottyjs -g
</code></pre>
</div>

<p>Prerequisites for Scotty are:</p>

<ul>
  <li>Node.js (v4+) with NPM</li>
  <li>AWS account</li>
  <li>AWS credentials — setup tutorial: http://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html</li>
</ul>

<p>Then just run following command:</p>

<div class="language-shell highlighter-rouge"><pre class="highlight"><code>scotty --spa --source ./build
</code></pre>
</div>

<p>This command tells Scotty that your app is single page app (SPA) and that the source of your project is in “build” folder.</p>

<blockquote>
  <p>Bucket names are global for all users, which means that you need to come up with a unique name for your app — reusing “scotty-cra-example” will not work.</p>
</blockquote>

<p>Running this command from your terminal will deploy the app and give you 2 URLs as shown here:</p>

<p><img src="/images/scotty.gif" alt="" /></p>

<p>First one, which is also added to your clipboard, is an HTTP link to AWS S3. The second one is a CloudFront URL that also supports HTTPS.</p>

<h3 id="cdn-and-https">CDN and HTTPS</h3>

<p>Scotty will set up your project on CloudFront CDN, which means it will be cached and distributed to different regions to decrease latency.
It will also set up HTTPS for free, so your app will be ready to use with service workers or anything else that requires a secure connection.</p>

<blockquote>
  <p>Live app: https://d1reyqfbyftmjg.cloudfront.net</p>
</blockquote>

<h2 id="how-does-it-work">How does it work</h2>

<p><img src="/images/scotty-aws-infrastructure.png" alt="" /></p>

<p>There’s no magic behind Scotty. It uses AWS SDK for Node.js behind the scene.</p>

<p>First, it checks if you already have a default region. Unfortunately, AWS doesn’t give us a default region via AWS SDK. Scotty has a small LevelDB database to store that info. If the region doesn’t exist and is not provided, Scotty will ask you to select it.</p>

<p>Next step is to create a bucket if bucket name is not provided, Scotty will use the name of your current folder. Keep in mind that bucket names are global for all users, hence, you need to come up with a unique name for your bucket.</p>

<p>After bucket is created, Scotty will upload your project to AWS S3 using AWS SDK. If a source flag is not provided, the current folder will be used as a source.
As the last step, if your project is a website or a single page app, Scotty will set up CloudFront CDN with HTTPS support. The difference between SPA and website is that Scotty redirects all of the non-existing pages back to index.html, which allows pushState to work out-of-the-box.</p>

<hr />

<p>What are the next steps?</p>

<p>Try Scotty and let me know if something can be improved. Happy to receive pull requests as new features and improvements are welcome.</p>

<blockquote>
  <p>Github repository: https://github.com/stojanovic/scottyjs</p>
</blockquote>

<p>The current idea for Scotty is to stay a small library for AWS only, but that doesn’t mean that it can’t be changed.</p>

<p>However, there are a few missing things, such as setting up custom domain names and config file for easier collaboration.</p>

<p>Hope you’ll enjoy it 👽</p>

<hr />

<p>Originally published on <a href="https://hackernoon.com/single-command-deployment-for-single-page-apps-29941d62ef97">Hackernoon</a>.</p>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/aws/s3/cloudfront/2017/08/25/single-command-deployment-for-single-page-apps/</guid>
                <description>
                    
                </description>
                <pubDate>Fri, 25 Aug 2017 12:00:00 +0200</pubDate>
                <author>Aleksandar Simović and Slobodan Stojanović</author>
            </item>
        
    
        
            <item>
                <title>How To Develop A Chat Bot With Node.js</title>
                <link>https://effortless-serverless.com/claudia/bot/2016/10/17/how-to-develop-a-chat-bot-with-nodejs/</link>
                <content:encoded>
                    <![CDATA[
                    <p>In the past few months, chat bots have become very popular, thanks to Slack, Telegram and Facebook Messenger. But the chat bot idea is not new at all.</p>

<p><img src="/images/chatbot-post-cover.png" alt="" /></p>

<p>A chat bot interface is mentioned in the famous Turing test in 1950. Then there was Eliza in 1966, a simulation of a Rogerian psychotherapist and an early example of primitive natural language processing. After that came Parry in 1972, a simulation of a person with paranoid schizophrenia (and, yes, of course, <a href="http://www.theatlantic.com/technology/archive/2014/06/when-parry-met-eliza-a-ridiculous-chatbot-conversation-from-1972/372428/">Parry met Eliza</a>).</p>

<p>In 1983, there was a book named The Policeman’s Beard Is Half Constructed, which was generated by Racter, an artificial intelligence computer program that generated random English-language prose, later released as a chat bot.</p>

<p>One of the most famous was Alice (artificial linguistic Internet computer entity), released in 1995. It wasn’t able to pass the Turing test, but it won the <a href="https://en.wikipedia.org/wiki/Loebner_Prize">Loebner Prize</a> three times. In 2005 and 2006, the same prize was won by two Jabberwacky bot characters.</p>

<p>And in 2014, Slackbot made chat bots popular again. In 2015, Telegram and then Facebook Messenger released chat bot support; then, in 2016 Skype did the same, and Apple and some other companies announced even more chat bot platforms.</p>

<h2 id="what-do-you-need-to-know-to-build-a-chat-bot">What Do You Need To Know To Build A Chat Bot?</h2>

<p>The answer to that mostly depends on what you want to build, of course.</p>

<p>In most cases, you can build a chat bot without knowing much about artificial intelligence (AI), either by avoiding it completely or by using some existing libraries for basic AI.</p>

<p>The same goes for natural language processing (NLP); it’s more important than AI, but you can build a chat bot using an NLP library or, for some platforms, simply by using buttons and UI elements instead of word processing.</p>

<p>And finally, do you even need to know programming? There are a lot of visual bot builders, so probably not. But it can be useful.</p>

<h2 id="how-to-build-a-facebook-messenger-bot">How To Build A Facebook Messenger Bot</h2>

<p>This is an article about building chat bots, so let’s finally dive deep into it. Let’s build a simple Facebook Messenger bot.</p>

<p>We’ll use Node.js, but you can build a chat bot with any programming language that allows you to create a web API.</p>

<p>Why Node.js? Because it’s perfect for chat bots: You can build a simple API quickly with hapi.js, Express, etc.; it supports real-time messages (RTM) for Slack RTM bots; and it’s easy to learn (at least easy enough to build a simple chat bot).</p>

<p>Facebook already has a sample chat bot written in Node.js, <a href="https://github.com/fbsamples/messenger-platform-samples">available on GitHub</a>. If you check the code, you’ll see that it uses the Express framework and that it has three webhooks (for verification, authentication and receiving messages). You’ll also see that it sends responses with Node.js’ Request module.</p>

<p>Sounds simple?</p>

<p>It is. But this complete sample bot has 839 lines of code. It’s not much and you probably need just half of that, but it’s still too much boilerplate code to start with.</p>

<p>What if I told you that we could have the same result with just five lines of JavaScript?</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">botBuilder</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'claudia-bot-builder'</span><span class="p">);</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">botBuilder</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">request</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="s1">'Thanks for sending '</span> <span class="o">+</span> <span class="nx">request</span><span class="p">.</span><span class="nx">text</span><span class="p">;</span>
<span class="p">});</span>
</code></pre>
</div>

<p>Or even fewer if you use ECMAScript 6:</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="kr">const</span> <span class="nx">botBuilder</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'claudia-bot-builder'</span><span class="p">);</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">botBuilder</span><span class="p">(</span><span class="nx">request</span> <span class="o">=&gt;</span> <span class="err">`</span><span class="nx">Thanks</span> <span class="k">for</span> <span class="nx">sending</span> <span class="nx">$</span><span class="p">{</span><span class="nx">request</span><span class="p">.</span><span class="nx">text</span><span class="p">}</span><span class="err">`</span><span class="p">);</span>
</code></pre>
</div>

<h2 id="meet-the-claudia-bot-builder">Meet The Claudia Bot Builder</h2>

<p>The Claudia Bot Builder helps developers create chat bots for Facebook Messenger, Telegram, Skype and Slack, and deploy them to Amazon Web Services’ (AWS) Lambda and API Gateway in minutes.</p>

<p>The key idea behind the project is to remove all of the boilerplate code and common infrastructure tasks, so that you can focus on writing the really important part of the bot — your business workflow. Everything else is handled by the Claudia Bot Builder.</p>

<p><img src="claudia-bot-builder.png" alt="Claudia Bot Builder" /></p>

<p>Why AWS Lambda? It’s a perfect match for chat bots: Creating a simple API is easy; it responds much faster to the first request than a free Heroku instance; and it’s really cheap. The first million requests each month are free, and the next million requests are just $0.20!</p>

<p>Here’s how easy it is to build a Facebook Messenger bot with Claudia Bot Builder:</p>

<iframe src="https://player.vimeo.com/video/170647056?title=0&amp;byline=0&amp;portrait=0" width="640" height="360" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen=""></iframe>
<p><a href="https://vimeo.com/170647056">Create chat-bots easily using Claudia Bot Builder</a> from <a href="https://vimeo.com/user49229162">Gojko Adzic</a> on <a href="https://vimeo.com">Vimeo</a>.</p>

<h2 id="lets-build-a-space-explorer-bot">Let’s Build A Space Explorer Bot</h2>

<p>Space Explorer is a simple Messenger chat bot that uses NASA’s API to get data and images about space.</p>

<p>Before we begin, create a Facebook page and app, and add Messenger integration, as described in Facebook’s <a href="https://developers.facebook.com/docs/messenger-platform/quickstart">Getting Started</a> guide.</p>

<p>Then, create a file named bot.js with the following content:</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="kr">const</span> <span class="nx">botBuilder</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'claudia-bot-builder'</span><span class="p">);</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">botBuilder</span><span class="p">(</span><span class="nx">request</span> <span class="o">=&gt;</span> <span class="err">`</span><span class="nx">Hello</span> <span class="nx">from</span> <span class="nx">space</span> <span class="nx">explorer</span> <span class="nx">bot</span><span class="o">!</span> <span class="nx">Your</span> <span class="nx">request</span> <span class="nx">was</span><span class="err">:</span> <span class="nx">$</span><span class="p">{</span><span class="nx">request</span><span class="p">.</span><span class="nx">text</span><span class="p">}</span><span class="err">`</span><span class="p">);</span>
</code></pre>
</div>

<p>Install these dependencies:</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="nx">npm</span> <span class="nx">init</span><span class="p">;</span>

<span class="nx">npm</span> <span class="nx">install</span> <span class="nx">claudia</span><span class="o">-</span><span class="nx">bot</span><span class="o">-</span><span class="nx">builder</span> <span class="o">-</span><span class="nx">S</span><span class="p">;</span>

<span class="nx">npm</span> <span class="nx">install</span> <span class="nx">claudia</span> <span class="o">-</span><span class="nx">g</span><span class="p">;</span>
</code></pre>
</div>

<p><img src="" alt="Create chat-bots easily using Claudia Bot Builder" /></p>

<p>Create a Lambda function and follow the instructions in the video above to connect it with your Facebook app:</p>

<div class="language-shell highlighter-rouge"><pre class="highlight"><code>claudia create --region us-east-1 --api-module bot --configure-fb-bot
</code></pre>
</div>

<p>That’s it! You’ve created your first chat bot for Facebook Messenger.</p>

<p>If you send a message to your page, your bot will reply. But the answer is too simple. Let’s add something more interesting!</p>

<h2 id="integrate-nasas-api">Integrate NASA’s API</h2>

<p>Before we continue, visit <a href="https://api.nasa.gov/">NASA’s API portal</a> and get an API key.</p>

<p>Then, add your API key as a <code class="highlighter-rouge">nasaApiKey</code> stage variable in API Gateway. You can do that from the UI or by running the following command:</p>

<div class="language-shell highlighter-rouge"><pre class="highlight"><code>aws apigateway create-deployment <span class="se">\</span>
    --rest-api-id API_ID --stage-name latest <span class="se">\</span>
    --variables <span class="nv">nasaApiKey</span><span class="o">=</span>YOUR_NASA_API_KEY
</code></pre>
</div>

<p>Here, <code class="highlighter-rouge">API_ID</code> is your API ID from the claudia.json file that was auto-generated in the previous step.</p>

<p>Let’s add a better answer to the text messages. Claudia Bot Builder has a simple builder for Facebook Messenger template messages (<a href="https://github.com/claudiajs/claudia-bot-builder/blob/master/docs/FB_TEMPLATE_MESSAGE_BUILDER.md">the documentation is on GitHub</a>).</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="kr">const</span> <span class="nx">botBuilder</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'claudia-bot-builder'</span><span class="p">);</span>
<span class="kr">const</span> <span class="nx">fbTemplate</span> <span class="o">=</span> <span class="nx">botBuilder</span><span class="p">.</span><span class="nx">fbTemplate</span><span class="p">;</span>
<span class="kr">const</span> <span class="nx">rp</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'minimal-request-promise'</span><span class="p">);</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">botBuilder</span><span class="p">((</span><span class="nx">request</span><span class="p">,</span> <span class="nx">originalApiRequest</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="c1">// If request is not postback</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">request</span><span class="p">.</span><span class="nx">postback</span><span class="p">)</span>
    <span class="c1">// We'll get some basic info about the user</span>
    <span class="k">return</span> <span class="nx">rp</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="err">`</span><span class="na">https</span><span class="p">:</span><span class="c1">//graph.facebook.com/v2.6/${request.sender}?fields=first_name&amp;access_token=${originalApiRequest.env.facebookAccessToken}`)</span>
      <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">response</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="kr">const</span> <span class="nx">user</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">body</span><span class="p">)</span>
        <span class="c1">// Then let's send two text messages and one generic template with three elements/bubbles</span>
        <span class="k">return</span> <span class="p">[</span>
          <span class="err">`</span><span class="nx">Hello</span><span class="p">,</span> <span class="nx">$</span><span class="p">{</span><span class="nx">user</span><span class="p">.</span><span class="nx">first_name</span><span class="p">}.</span> <span class="nx">Welcome</span> <span class="nx">to</span> <span class="nx">Space</span> <span class="nx">Explorer</span><span class="o">!</span> <span class="nx">Ready</span> <span class="nx">to</span> <span class="nx">start</span> <span class="nx">a</span> <span class="nx">journey</span> <span class="nx">through</span> <span class="nx">space</span><span class="p">?</span><span class="err">`</span><span class="p">,</span>
          <span class="s1">'What can I do for you today?'</span><span class="p">,</span>
          <span class="k">return</span> <span class="k">new</span> <span class="nx">fbTemplate</span><span class="p">.</span><span class="nx">generic</span><span class="p">()</span>
            <span class="p">.</span><span class="nx">addBubble</span><span class="p">(</span><span class="err">`</span><span class="nx">NASA</span><span class="s1">'s Astronomy Picture of the Day`, '</span><span class="nx">Satellite</span> <span class="nx">icon</span> <span class="nx">by</span> <span class="nx">parkjisun</span> <span class="nx">from</span> <span class="nx">the</span> <span class="nx">Noun</span> <span class="nx">Project</span><span class="s1">')
              .addImage('</span><span class="nx">https</span><span class="p">:</span><span class="c1">//raw.githubusercontent.com/stojanovic/space-explorer-bot/master/assets/images/apod.png')</span>
              <span class="p">.</span><span class="nx">addButton</span><span class="p">(</span><span class="s1">'Show'</span><span class="p">,</span> <span class="s1">'SHOW_APOD'</span><span class="p">)</span>
              <span class="p">.</span><span class="nx">addButton</span><span class="p">(</span><span class="s1">'What is APOD?'</span><span class="p">,</span> <span class="s1">'ABOUT_APOD'</span><span class="p">)</span>
              <span class="p">.</span><span class="nx">addButton</span><span class="p">(</span><span class="s1">'Website'</span><span class="p">,</span> <span class="s1">'http://apod.nasa.gov/apod/'</span><span class="p">)</span>
            <span class="p">.</span><span class="nx">addBubble</span><span class="p">(</span><span class="err">`</span><span class="nx">Photos</span> <span class="nx">from</span> <span class="nx">NASA</span><span class="s1">'s rovers on Mars`, '</span><span class="nx">Curiosity</span> <span class="nx">Rover</span> <span class="nx">icon</span> <span class="nx">by</span> <span class="nx">Oliviu</span> <span class="nx">Stoian</span> <span class="nx">from</span> <span class="nx">the</span> <span class="nx">Noun</span> <span class="nx">Project</span><span class="s1">')
              .addImage('</span><span class="na">https</span><span class="p">:</span><span class="c1">//raw.githubusercontent.com/stojanovic/space-explorer-bot/master/assets/images/mars-rover.png')</span>
              <span class="p">.</span><span class="nx">addButton</span><span class="p">(</span><span class="s1">'Curiosity'</span><span class="p">,</span> <span class="s1">'CURIOSITY_IMAGES'</span><span class="p">)</span>
              <span class="p">.</span><span class="nx">addButton</span><span class="p">(</span><span class="s1">'Opportunity'</span><span class="p">,</span> <span class="s1">'OPPORTUNITY_IMAGES'</span><span class="p">)</span>
              <span class="p">.</span><span class="nx">addButton</span><span class="p">(</span><span class="s1">'Spirit'</span><span class="p">,</span> <span class="s1">'SPIRIT_IMAGES'</span><span class="p">)</span>
            <span class="p">.</span><span class="nx">addBubble</span><span class="p">(</span><span class="s1">'Help &amp; info'</span><span class="p">,</span> <span class="s1">'Monster icon by Paulo Sá Ferreira from the Noun Project'</span><span class="p">)</span>
              <span class="p">.</span><span class="nx">addImage</span><span class="p">(</span><span class="s1">'https://raw.githubusercontent.com/stojanovic/space-explorer-bot/master/assets/images/about.png'</span><span class="p">)</span>
              <span class="p">.</span><span class="nx">addButton</span><span class="p">(</span><span class="s1">'About the bot'</span><span class="p">,</span> <span class="s1">'ABOUT'</span><span class="p">)</span>
              <span class="p">.</span><span class="nx">addButton</span><span class="p">(</span><span class="s1">'Credits'</span><span class="p">,</span> <span class="s1">'CREDITS'</span><span class="p">)</span>
              <span class="p">.</span><span class="nx">addButton</span><span class="p">(</span><span class="s1">'Report an issue'</span><span class="p">,</span> <span class="s1">'https://github.com/stojanovic/space-explorer-bot/issues'</span><span class="p">)</span>
            <span class="p">.</span><span class="nx">get</span><span class="p">();</span>
        <span class="p">];</span>
      <span class="p">});</span>
<span class="p">}</span>
</code></pre>
</div>

<p>Now our bot has a nice welcome answer:</p>

<p><img src="/images/initial-chatbot.png" alt="" /></p>

<p>Much better!</p>

<p>Next, we want to handle postbacks. Let’s start with NASA’s Astronomy Picture of the Day:</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="c1">// In case of the 'SHOW_APOD' postback, we'll contact NASA API and get the photo of the day.</span>
<span class="k">if</span> <span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">text</span> <span class="o">===</span> <span class="s1">'SHOW_APOD'</span><span class="p">)</span>
  <span class="k">return</span> <span class="nx">rp</span><span class="p">(</span><span class="err">`</span><span class="nx">https</span><span class="err">:</span><span class="c1">//api.nasa.gov/planetary/apod?api_key=${originalApiRequest.env.nasaApiKey}`)</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">response</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="kr">const</span> <span class="nx">APOD</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">body</span><span class="p">)</span>
      <span class="k">return</span> <span class="p">[</span>
        <span class="err">`</span><span class="nx">NASA</span><span class="s1">'s Astronomy Picture of the Day for ${APOD.date}`,
        `"${APOD.title}", © ${APOD.copyright}`,
        new fbTemplate.image(APOD.url).get(),
        APOD.explanation,
        new fbTemplate.button('</span><span class="nx">More</span> <span class="na">actions</span><span class="p">:</span><span class="s1">')
          .addButton('</span><span class="nx">Download</span> <span class="nx">HD</span><span class="s1">', APOD.hdurl)
          .addButton('</span><span class="nx">Visit</span> <span class="nx">website</span><span class="s1">', '</span><span class="na">http</span><span class="p">:</span><span class="c1">//apod.nasa.gov/apod/')</span>
          <span class="p">.</span><span class="nx">addButton</span><span class="p">(</span><span class="s1">'Back to start'</span><span class="p">,</span> <span class="s1">'MAIN_MENU'</span><span class="p">)</span>
          <span class="p">.</span><span class="nx">get</span><span class="p">()</span>
      <span class="p">]</span>
    <span class="p">});</span>
</code></pre>
</div>

<p>And here are the Mars rovers (Curiosity, Opportunity and Spirit):</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="c1">// Common API call</span>
<span class="kd">function</span> <span class="nx">getRoverPhotos</span><span class="p">(</span><span class="nx">rover</span><span class="p">,</span> <span class="nx">sol</span><span class="p">,</span> <span class="nx">nasaApiKey</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// If sol (Mars day) is not defined, take a random one.</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">sol</span><span class="p">)</span>
    <span class="nx">sol</span> <span class="o">=</span> <span class="p">(</span><span class="nb">parseInt</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="mi">9</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="mi">100</span><span class="p">;</span>

  <span class="c1">// Contact the API</span>
  <span class="k">return</span> <span class="nx">rp</span><span class="p">(</span><span class="err">`</span><span class="nx">http</span><span class="err">:</span><span class="c1">//api.nasa.gov/mars-photos/api/v1/rovers/${rover}/photos?sol=${sol}&amp;api_key=${nasaApiKey}`)</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">response</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="kd">let</span> <span class="nx">rawBody</span> <span class="o">=</span> <span class="nx">response</span><span class="p">.</span><span class="nx">body</span><span class="p">;</span>

      <span class="kd">let</span> <span class="nx">roverInfo</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="s1">''</span> <span class="o">+</span> <span class="nx">rawBody</span><span class="p">);</span>
      <span class="c1">// Create generic template with up to 10 photos.</span>
      <span class="kd">let</span> <span class="nx">photos</span> <span class="o">=</span> <span class="nx">roverInfo</span><span class="p">.</span><span class="nx">photos</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
      <span class="kd">let</span> <span class="nx">roverImages</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">fbTemplate</span><span class="p">.</span><span class="nx">generic</span><span class="p">();</span>

      <span class="nx">photos</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">photo</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">roverImages</span><span class="p">.</span><span class="nx">addBubble</span><span class="p">(</span><span class="nx">photo</span><span class="p">.</span><span class="nx">rover</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span> <span class="s1">'At '</span> <span class="o">+</span> <span class="nx">photo</span><span class="p">.</span><span class="nx">earth_date</span> <span class="o">+</span> <span class="s1">' (sol '</span> <span class="o">+</span> <span class="nx">photo</span><span class="p">.</span><span class="nx">sol</span> <span class="o">+</span> <span class="s1">'), using '</span> <span class="o">+</span> <span class="nx">photo</span><span class="p">.</span><span class="nx">camera</span><span class="p">.</span><span class="nx">full_name</span><span class="p">)</span>
          <span class="p">.</span><span class="nx">addImage</span><span class="p">(</span><span class="nx">photo</span><span class="p">.</span><span class="nx">img_src</span><span class="p">)</span>
          <span class="p">.</span><span class="nx">addButton</span><span class="p">(</span><span class="s1">'Download'</span><span class="p">,</span> <span class="nx">photo</span><span class="p">.</span><span class="nx">img_src</span><span class="p">)</span>
      <span class="p">});</span>

      <span class="c1">// Send the message.</span>
      <span class="k">return</span> <span class="p">[</span>
        <span class="err">`</span><span class="nx">$</span><span class="p">{</span><span class="nx">roverInfo</span><span class="p">.</span><span class="nx">photos</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">rover</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span> <span class="nx">rover</span><span class="err">`</span><span class="p">,</span>
        <span class="err">`</span><span class="nx">Landing</span> <span class="na">Date</span><span class="p">:</span> <span class="nx">$</span><span class="p">{</span><span class="nx">roverInfo</span><span class="p">.</span><span class="nx">photos</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">rover</span><span class="p">.</span><span class="nx">landing_date</span><span class="p">}</span> <span class="err">\</span><span class="nx">nTotal</span> <span class="na">photos</span><span class="p">:</span> <span class="nx">$</span><span class="p">{</span><span class="nx">roverInfo</span><span class="p">.</span><span class="nx">photos</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">rover</span><span class="p">.</span><span class="nx">total_photos</span><span class="p">}</span><span class="err">`</span><span class="p">,</span>
        <span class="nx">roverImages</span><span class="p">.</span><span class="nx">get</span><span class="p">(),</span>
        <span class="k">new</span> <span class="nx">fbTemplate</span><span class="p">.</span><span class="nx">button</span><span class="p">(</span><span class="s1">'More actions:'</span><span class="p">)</span>
          <span class="p">.</span><span class="nx">addButton</span><span class="p">(</span><span class="s1">'Show newest photos'</span><span class="p">,</span> <span class="err">`</span><span class="nx">PHOTOS_$</span><span class="p">{</span><span class="nx">rover</span><span class="p">}</span><span class="nx">_$</span><span class="p">{</span><span class="nx">roverInfo</span><span class="p">.</span><span class="nx">photos</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">rover</span><span class="p">.</span><span class="nx">max_sol</span><span class="p">}</span><span class="err">`</span><span class="p">)</span>
          <span class="p">.</span><span class="nx">addButton</span><span class="p">(</span><span class="s1">'Visit Wikipedia'</span><span class="p">,</span> <span class="err">`</span><span class="na">https</span><span class="p">:</span><span class="c1">//en.wikipedia.org/wiki/${rover}_(rover)`)</span>
          <span class="p">.</span><span class="nx">addButton</span><span class="p">(</span><span class="s1">'Back to start'</span><span class="p">,</span> <span class="s1">'MAIN_MENU'</span><span class="p">)</span>
          <span class="p">.</span><span class="nx">get</span><span class="p">()</span>
      <span class="p">];</span>
    <span class="p">})</span>
    <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">err</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="c1">// If the selected sol doesn't have any photos, take the photos from sol 1000.</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
      <span class="k">return</span> <span class="nx">getRoverPhotos</span><span class="p">(</span><span class="nx">rover</span><span class="p">,</span> <span class="mi">1000</span><span class="p">,</span> <span class="nx">nasaApiKey</span><span class="p">);</span>
    <span class="p">});</span>
<span class="p">}</span>

<span class="c1">// Curiosity photos</span>
<span class="k">if</span> <span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">text</span> <span class="o">===</span> <span class="s1">'CURIOSITY_IMAGES'</span><span class="p">)</span>
  <span class="k">return</span> <span class="nx">getRoverPhotos</span><span class="p">(</span><span class="s1">'curiosity'</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="nx">originalApiRequest</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">nasaApiKey</span><span class="p">);</span>

<span class="c1">// Opportunity photos</span>
<span class="k">if</span> <span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">text</span> <span class="o">===</span> <span class="s1">'OPPORTUNITY_IMAGES'</span><span class="p">)</span>
  <span class="k">return</span> <span class="nx">getRoverPhotos</span><span class="p">(</span><span class="s1">'opportunity'</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="nx">originalApiRequest</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">nasaApiKey</span><span class="p">);</span>

<span class="c1">// Spirit photos</span>
<span class="k">if</span> <span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">text</span> <span class="o">===</span> <span class="s1">'SPIRIT_IMAGES'</span><span class="p">)</span>
  <span class="k">return</span> <span class="nx">getRoverPhotos</span><span class="p">(</span><span class="s1">'spirit'</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="nx">originalApiRequest</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">nasaApiKey</span><span class="p">);</span>

<span class="c1">// Rover photos by sol (Mars day)</span>
<span class="k">if</span> <span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">text</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">'PHOTOS_'</span><span class="p">)</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
  <span class="kr">const</span> <span class="nx">args</span> <span class="o">=</span> <span class="nx">request</span><span class="p">.</span><span class="nx">text</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">'_'</span><span class="p">)</span>
  <span class="k">return</span> <span class="nx">getRoverPhotos</span><span class="p">(</span><span class="nx">args</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="nx">args</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="nx">originalApiRequest</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">nasaApiKey</span><span class="p">);</span>
<span class="p">}</span>
</code></pre>
</div>

<p>Finally, add some static content to the end:</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="c1">// About Astronomy Picture of the Day</span>
<span class="k">if</span> <span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">text</span> <span class="o">===</span> <span class="s1">'ABOUT_APOD'</span><span class="p">)</span>
  <span class="k">return</span> <span class="p">[</span>
    <span class="err">`</span><span class="nx">The</span> <span class="nx">Astronomy</span> <span class="nx">Picture</span> <span class="nx">of</span> <span class="nx">the</span> <span class="nx">Day</span> <span class="nx">is</span> <span class="nx">one</span> <span class="nx">of</span> <span class="nx">the</span> <span class="nx">most</span> <span class="nx">popular</span> <span class="nx">websites</span> <span class="nx">at</span> <span class="nx">NASA</span><span class="p">.</span> <span class="nx">In</span> <span class="nx">fact</span><span class="p">,</span> <span class="k">this</span> <span class="nx">website</span> <span class="nx">is</span> <span class="nx">one</span> <span class="nx">of</span> <span class="nx">the</span> <span class="nx">most</span> <span class="nx">popular</span> <span class="nx">websites</span> <span class="nx">across</span> <span class="nx">all</span> <span class="nx">federal</span> <span class="nx">agencies</span><span class="p">.</span> <span class="nx">It</span> <span class="nx">has</span> <span class="nx">the</span> <span class="nx">popular</span> <span class="nx">appeal</span> <span class="nx">of</span> <span class="nx">a</span> <span class="nx">Justin</span> <span class="nx">Bieber</span> <span class="nx">video</span><span class="p">.</span><span class="err">`</span><span class="p">,</span>
    <span class="err">`</span><span class="nx">Each</span> <span class="nx">day</span> <span class="nx">a</span> <span class="nx">different</span> <span class="nx">image</span> <span class="nx">or</span> <span class="nx">photograph</span> <span class="nx">of</span> <span class="nx">our</span> <span class="nx">fascinating</span> <span class="nx">universe</span> <span class="nx">is</span> <span class="nx">featured</span><span class="p">,</span> <span class="nx">along</span> <span class="kd">with</span> <span class="nx">a</span> <span class="nx">brief</span> <span class="nx">explanation</span> <span class="nx">written</span> <span class="nx">by</span> <span class="nx">a</span> <span class="nx">professional</span> <span class="nx">astronomer</span><span class="p">.</span><span class="err">`</span><span class="p">,</span>
    <span class="k">new</span> <span class="nx">fbTemplate</span><span class="p">.</span><span class="nx">button</span><span class="p">(</span><span class="s1">'More actions:'</span><span class="p">)</span>
      <span class="p">.</span><span class="nx">addButton</span><span class="p">(</span><span class="s1">'Show photo'</span><span class="p">,</span> <span class="s1">'SHOW_APOD'</span><span class="p">)</span>
      <span class="p">.</span><span class="nx">addButton</span><span class="p">(</span><span class="s1">'Visit website'</span><span class="p">,</span> <span class="s1">'http://apod.nasa.gov/apod/'</span><span class="p">)</span>
      <span class="p">.</span><span class="nx">addButton</span><span class="p">(</span><span class="s1">'Back to start'</span><span class="p">,</span> <span class="s1">'MAIN_MENU'</span><span class="p">)</span>
      <span class="p">.</span><span class="nx">get</span><span class="p">()</span>
  <span class="p">];</span>

<span class="c1">// About the bot</span>
<span class="k">if</span> <span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">text</span> <span class="o">===</span> <span class="s1">'ABOUT'</span><span class="p">)</span>
  <span class="k">return</span> <span class="p">[</span>
    <span class="err">`</span><span class="nx">Space</span> <span class="nx">Explorer</span> <span class="nx">is</span> <span class="nx">simple</span> <span class="nx">Messenger</span> <span class="nx">chat</span> <span class="nx">bot</span> <span class="nx">that</span> <span class="nx">uses</span> <span class="nx">NASA</span><span class="s1">'s API to get the data and images about the space`,
    `It'</span><span class="nx">s</span> <span class="nx">created</span> <span class="k">for</span> <span class="nx">fun</span> <span class="nx">and</span> <span class="nx">also</span> <span class="nx">as</span> <span class="nx">a</span> <span class="nx">showcase</span> <span class="k">for</span> <span class="nx">Claudia</span> <span class="nx">Bot</span> <span class="nx">Builder</span><span class="p">,</span> <span class="nx">node</span><span class="p">.</span><span class="nx">js</span> <span class="nx">library</span> <span class="k">for</span> <span class="nx">creating</span> <span class="nx">chat</span> <span class="nx">bots</span> <span class="k">for</span> <span class="nx">various</span> <span class="nx">platform</span> <span class="nx">and</span> <span class="nx">deploying</span> <span class="nx">them</span> <span class="nx">on</span> <span class="nx">AWS</span> <span class="nx">Lambda</span><span class="err">`</span><span class="p">,</span>
    <span class="k">new</span> <span class="nx">fbTemplate</span><span class="p">.</span><span class="nx">button</span><span class="p">(</span><span class="s1">'More actions:'</span><span class="p">)</span>
      <span class="p">.</span><span class="nx">addButton</span><span class="p">(</span><span class="s1">'Claudia Bot Builder'</span><span class="p">,</span> <span class="s1">'https://github.com/claudiajs/claudia-bot-builder'</span><span class="p">)</span>
      <span class="p">.</span><span class="nx">addButton</span><span class="p">(</span><span class="s1">'Source code'</span><span class="p">,</span> <span class="s1">'https://github.com/stojanovic/space-explorer-bot'</span><span class="p">)</span>
      <span class="p">.</span><span class="nx">get</span><span class="p">()</span>
  <span class="p">];</span>

<span class="c1">// Finally, credits</span>
<span class="k">if</span> <span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">text</span> <span class="o">===</span> <span class="s1">'CREDITS'</span><span class="p">)</span>
  <span class="k">return</span> <span class="p">[</span>
    <span class="s1">'Claudia Bot Builder was created by Gojko Adžić, Aleksandar Simović and Slobodan Stojanović'</span><span class="p">,</span>
    <span class="s1">'Icons used for the bot are from the Noun Project'</span><span class="p">,</span>
    <span class="s1">'- Rocket icon by misirlou, \n- Satellite icon by parkjisun, \n- Curiosity Rover icon by Oliviu Stoian, \n- Monster icon by Paulo Sá Ferreira'</span><span class="p">,</span>
    <span class="s1">'This bot was created by Claudia Bot Builder team'</span><span class="p">,</span>
    <span class="k">new</span> <span class="nx">fbTemplate</span><span class="p">.</span><span class="nx">button</span><span class="p">(</span><span class="s1">'More actions:'</span><span class="p">)</span>
      <span class="p">.</span><span class="nx">addButton</span><span class="p">(</span><span class="s1">'Claudia Bot Builder'</span><span class="p">,</span> <span class="s1">'https://github.com/claudiajs/claudia-bot-builder'</span><span class="p">)</span>
      <span class="p">.</span><span class="nx">addButton</span><span class="p">(</span><span class="s1">'The Noun Project'</span><span class="p">,</span> <span class="s1">'https://thenounproject.com'</span><span class="p">)</span>
      <span class="p">.</span><span class="nx">addButton</span><span class="p">(</span><span class="s1">'Source code'</span><span class="p">,</span> <span class="s1">'https://github.com/stojanovic/space-explorer-bot'</span><span class="p">)</span>
      <span class="p">.</span><span class="nx">get</span><span class="p">()</span>
  <span class="p">];</span>
</code></pre>
</div>

<h2 id="result">Result</h2>

<p>After minor refactoring, our code should look something like the <a href="source on GitHub">source on GitHub</a>.</p>

<p>And here’s how our bot works:</p>

<iframe src="https://player.vimeo.com/video/172001135" width="640" height="700" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen=""></iframe>
<p><a href="https://vimeo.com/172001135">Space Explorer chat bot for FB Messenger using Claudia Bot Builder</a> from <a href="https://vimeo.com/user53636250">Slobodan Stojanović</a> on <a href="https://vimeo.com">Vimeo</a>.</p>

<p>You can try it live on your page or on the <a href="https://m.me/space-explorer-bot">Space Explorer bot</a> page on Facebook Messenger.</p>

<p><img src="/images/messenger-code.png" alt="Space Explorer Bot Messenger code" /></p>

<p>That’s it!</p>

<p>You’ve successfully built your first chat bot using Claudia Bot Builder. It was easy, wasn’t it?</p>

<p>Now go and build more cool chat bots.</p>

<hr />

<p>Originally published on: <a href="https://www.smashingmagazine.com/2016/10/how-to-develop-a-chat-bot-with-node-js/">Smashing magazine</a>.</p>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/claudia/bot/2016/10/17/how-to-develop-a-chat-bot-with-nodejs/</guid>
                <description>
                    
                </description>
                <pubDate>Mon, 17 Oct 2016 12:00:00 +0200</pubDate>
                <author>Aleksandar Simović and Slobodan Stojanović</author>
            </item>
        
    
  </channel>
</rss>
